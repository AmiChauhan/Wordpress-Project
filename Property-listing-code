++++++++++++++++++++++++  Header.php  +++++++++++++++++++++++++
<?php
/**
 * The header for our theme
 *
 * This is the template that displays all of the <head> section and everything up until <div id="content">
 *
 * @link https://developer.wordpress.org/themes/basics/template-files/#template-partials
 *
 * @package myfirstsite
 */

?>
<!doctype html>
<html <?php language_attributes(); ?>>
<head>
	<meta charset="<?php bloginfo( 'charset' ); ?>">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="profile" href="https://gmpg.org/xfn/11">

	<?php wp_head(); ?>
</head>

<body <?php body_class(); ?>>
<?php wp_body_open(); ?>
<div id="page" class="site">
	<a class="skip-link screen-reader-text" href="#primary"><?php esc_html_e( 'Skip to content', 'myfirstsite' ); ?></a>

	<header id="masthead" class="site-header">
		<div class="container">
			<div class="header-main">
		<div class="site-branding">
			<?php
			the_custom_logo();
			
			$myfirstsite_description = get_bloginfo( 'description', 'display' );
			if ( $myfirstsite_description || is_customize_preview() ) :
				?>
				<p class="site-description"><?php echo $myfirstsite_description; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped ?></p>
			<?php endif; ?>
		</div><!-- .site-branding -->

		<nav id="site-navigation" class="main-navigation sidebar-menu">
    <button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false">
        <?php esc_html_e( 'Primary Menu', 'myfirstsite' ); ?>
    </button>
    <?php
    wp_nav_menu(
        array(
            'menu' => 'header',
            'theme_location' => 'primary',
            'menu_id'        => 'primary-menu',
            'container_class' => 'menu-container',
        )
    );
    ?>
</nav><!-- #site-navigation -->

		</div>
		</div>
	</header><!-- #masthead -->





+++++++++++++++++++++++++=STYLE.CSS++++++++++++++++++++++++++++++++++++++++++++++++++++++++

header {
    background-color: #16243e;
    padding: 20px 0;
}
.header-main {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
}
.main-navigation ul {
    display: block !important;
}

nav#site-navigation {
    text-align: right;
}

.main-navigation ul li {
    display: inline-block;
    padding: 10px 20px;
}

.main-navigation ul li a {
    color: #fff;
    font-size: 18px;
}


.filter-buttons {
    margin-bottom: 20px;
}

.filter-button {
    display: inline-block;
    margin: 5px;
    padding: 8px 16px;
    background-color: #eee;
    border: none;
    cursor: pointer;
    border-radius: 4px;
    transition: background-color 0.2s ease;
}

.filter-button.active,
.filter-button:hover {
    background-color: #0073aa;
    color: #fff;
}
.no-more-posts {
    margin-top: 20px;
    padding: 10px;
    color: #666;
    text-align: center;
    font-style: italic;
}
.property-item {
    border: 1px solid #ddd;
    padding: 16px;
    margin-bottom: 20px;
    border-radius: 6px;
    background: #fafafa;
}

.property-thumb img {
    width: 100%;
    height: auto;
    margin-bottom: 10px;
    border-radius: 4px;
}

.property-item h3 {
    margin-top: 0;
}

.property-item p {
    margin: 8px 0;
}



/* Hide the toggle by default */
.menu-toggle {
  display: none;
}

/* Show toggle only on small screens (<768px) */
@media (max-width: 767px) {
  .menu-toggle {
    display: inline-block;
  }

  /* Sidebar menu is off-canvas initially */
  .sidebar-menu {
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: 280px;
    background: #222;
    color: #fff;
    overflow-y: auto;
    transform: translateX(-100%);
    transition: transform 0.3s ease-in-out;
    z-index: 1000;
    padding: 1rem;
    box-sizing: border-box;
  }

  /* Show sidebar when active */
  .sidebar-menu.active {
    transform: translateX(0);
  }

  /* Push page content right when menu is open (optional) */
  body.menu-opened #page {
    margin-left: 280px;
    transition: margin-left 0.3s ease-in-out;
  }
}

/* On desktop, show the menu normally without sidebar style */
@media (min-width: 768px) {
  .sidebar-menu {
    position: static;
    transform: none !important;
    width: auto;
    height: auto;
    background: transparent;
    padding: 0;
  }

  body.menu-opened #page {
    margin-left: 0;
  }
}


++++++++++++++++++++++++++++++++++++++++++++++++FUNCTION.PHP ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<?php
/**
 * myfirstsite functions and definitions
 *
 * @link https://developer.wordpress.org/themes/basics/theme-functions/
 *
 * @package myfirstsite
 */

if ( ! defined( '_S_VERSION' ) ) {
	// Replace the version number of the theme on each release.
	define( '_S_VERSION', '1.0.0' );
}

/**
 * Sets up theme defaults and registers support for various WordPress features.
 *
 * Note that this function is hooked into the after_setup_theme hook, which
 * runs before the init hook. The init hook is too late for some features, such
 * as indicating support for post thumbnails.
 */
function myfirstsite_setup() {
	/*
		* Make theme available for translation.
		* Translations can be filed in the /languages/ directory.
		* If you're building a theme based on myfirstsite, use a find and replace
		* to change 'myfirstsite' to the name of your theme in all the template files.
		*/
	load_theme_textdomain( 'myfirstsite', get_template_directory() . '/languages' );

	// Add default posts and comments RSS feed links to head.
	add_theme_support( 'automatic-feed-links' );

	/*
		* Let WordPress manage the document title.
		* By adding theme support, we declare that this theme does not use a
		* hard-coded <title> tag in the document head, and expect WordPress to
		* provide it for us.
		*/
	add_theme_support( 'title-tag' );

	/*
		* Enable support for Post Thumbnails on posts and pages.
		*
		* @link https://developer.wordpress.org/themes/functionality/featured-images-post-thumbnails/
		*/
	add_theme_support( 'post-thumbnails' );

	// This theme uses wp_nav_menu() in one location.
	register_nav_menus(
		array(
			'menu-1' => esc_html__( 'Primary', 'myfirstsite' ),
		)
	);

	/*
		* Switch default core markup for search form, comment form, and comments
		* to output valid HTML5.
		*/
	add_theme_support(
		'html5',
		array(
			'search-form',
			'comment-form',
			'comment-list',
			'gallery',
			'caption',
			'style',
			'script',
		)
	);

	// Set up the WordPress core custom background feature.
	add_theme_support(
		'custom-background',
		apply_filters(
			'myfirstsite_custom_background_args',
			array(
				'default-color' => 'ffffff',
				'default-image' => '',
			)
		)
	);

	// Add theme support for selective refresh for widgets.
	add_theme_support( 'customize-selective-refresh-widgets' );

	/**
	 * Add support for core custom logo.
	 *
	 * @link https://codex.wordpress.org/Theme_Logo
	 */
	add_theme_support(
		'custom-logo',
		array(
			'height'      => 250,
			'width'       => 250,
			'flex-width'  => true,
			'flex-height' => true,
		)
	);
}
add_action( 'after_setup_theme', 'myfirstsite_setup' );

/**
 * Set the content width in pixels, based on the theme's design and stylesheet.
 *
 * Priority 0 to make it available to lower priority callbacks.
 *
 * @global int $content_width
 */
function myfirstsite_content_width() {
	$GLOBALS['content_width'] = apply_filters( 'myfirstsite_content_width', 640 );
}
add_action( 'after_setup_theme', 'myfirstsite_content_width', 0 );

/**
 * Register widget area.
 *
 * @link https://developer.wordpress.org/themes/functionality/sidebars/#registering-a-sidebar
 */
function myfirstsite_widgets_init() {
	register_sidebar(
		array(
			'name'          => esc_html__( 'Sidebar', 'myfirstsite' ),
			'id'            => 'sidebar-1',
			'description'   => esc_html__( 'Add widgets here.', 'myfirstsite' ),
			'before_widget' => '<section id="%1$s" class="widget %2$s">',
			'after_widget'  => '</section>',
			'before_title'  => '<h2 class="widget-title">',
			'after_title'   => '</h2>',
		)
	);
}
add_action( 'widgets_init', 'myfirstsite_widgets_init' );

/**
 * Enqueue scripts and styles.
 */
function myfirstsite_scripts() {
	wp_enqueue_style( 'myfirstsite-style', get_stylesheet_uri(), array(), _S_VERSION );
	wp_style_add_data( 'myfirstsite-style', 'rtl', 'replace' );

	wp_enqueue_script( 'myfirstsite-navigation', get_template_directory_uri() . '/js/navigation.js', array(), _S_VERSION, true );

	if ( is_singular() && comments_open() && get_option( 'thread_comments' ) ) {
		wp_enqueue_script( 'comment-reply' );
	}
}
add_action( 'wp_enqueue_scripts', 'myfirstsite_scripts' );

/**
 * Implement the Custom Header feature.
 */
require get_template_directory() . '/inc/custom-header.php';

/**
 * Custom template tags for this theme.
 */
require get_template_directory() . '/inc/template-tags.php';

/**
 * Functions which enhance the theme by hooking into WordPress.
 */
require get_template_directory() . '/inc/template-functions.php';

/**
 * Customizer additions.
 */
require get_template_directory() . '/inc/customizer.php';

/**
 * Load Jetpack compatibility file.
 */
if ( defined( 'JETPACK__VERSION' ) ) {
	require get_template_directory() . '/inc/jetpack.php';
}

function theme_enqueue_styles_scripts() {
    // Enqueue Styles
	wp_enqueue_style('slick-css', get_template_directory_uri() . '/css/style.css');
    wp_enqueue_style('bootstrap-css', get_template_directory_uri() . '/css/bootstrap.min.css');
    wp_enqueue_style('slick-css', get_template_directory_uri() . '/css/slick-theme.css');

    wp_enqueue_style('main-style', get_stylesheet_uri()); // Loads style.css

    // Enqueue Scripts
	wp_enqueue_script('jquery-js', get_template_directory_uri() . '/js/jquery.js', array('jquery'), null, true);
	wp_enqueue_script('main-js', get_template_directory_uri() . '/js/main.js', array('jquery'), null, true);
    wp_enqueue_script('bootstrap-js', get_template_directory_uri() . '/js/bootstrap.min.js', array('jquery'), null, true);
    wp_enqueue_script('slick-js', get_template_directory_uri() . '/js/slick.min.js', array('jquery'), null, true);
}
add_action('wp_enqueue_scripts', 'theme_enqueue_styles_scripts');



// Register Custom Post Type: Property
function register_property_post_type() {
    $labels = array(
        'name'               => 'Properties',
        'singular_name'      => 'Property',
        'menu_name'          => 'Properties',
        'name_admin_bar'     => 'Property',
        'add_new'            => 'Add New',
        'add_new_item'       => 'Add New Property',
        'new_item'           => 'New Property',
        'edit_item'          => 'Edit Property',
        'view_item'          => 'View Property',
        'all_items'          => 'All Properties',
        'search_items'       => 'Search Properties',
        'not_found'          => 'No properties found.',
        'not_found_in_trash' => 'No properties found in Trash.',
    );

    $args = array(
        'labels'             => $labels,
        'public'             => true,
        'has_archive'        => true,
        'rewrite'            => array('slug' => 'properties'),
        'supports'           => array('title', 'editor', 'thumbnail', 'excerpt'),
        'show_in_rest'       => true, // Enables Gutenberg & REST API support
        'menu_icon'          => 'dashicons-admin-home',
    );

    register_post_type('property', $args);
}
add_action('init', 'register_property_post_type');

// Register Custom Taxonomy: Property Type
function register_property_type_taxonomy() {
    $labels = array(
        'name'              => 'Property Types',
        'singular_name'     => 'Property Type',
        'search_items'      => 'Search Property Types',
        'all_items'         => 'All Property Types',
        'parent_item'       => 'Parent Property Type',
        'parent_item_colon' => 'Parent Property Type:',
        'edit_item'         => 'Edit Property Type',
        'update_item'       => 'Update Property Type',
        'add_new_item'      => 'Add New Property Type',
        'new_item_name'     => 'New Property Type Name',
        'menu_name'         => 'Property Types',
    );

    $args = array(
        'hierarchical'      => true, // Set to false for tags-like behavior
        'labels'            => $labels,
        'show_ui'           => true,
        'show_admin_column' => true,
        'rewrite'           => array('slug' => 'property-type'),
        'show_in_rest'      => true, // Enables Gutenberg & REST API support
    );

    register_taxonomy('property-type', array('property'), $args);
}
add_action('init', 'register_property_type_taxonomy');



function ajax_property_listing_shortcode() {
    ob_start();

    $terms = get_terms(array(
        'taxonomy' => 'property-type',
        'hide_empty' => true,
    ));
    ?>

    <div class="property-filter-wrapper">
        <select id="property-filter">
            <option value="all">All Property Types</option>
            <?php foreach ($terms as $term): ?>
                <option value="<?php echo esc_attr($term->slug); ?>" <?php selected($term->slug, 'apartment'); ?>>
                    <?php echo esc_html($term->name); ?>
                </option>
            <?php endforeach; ?>
        </select>

        <div class="property-list"></div>
        <button class="load-more" style="display: none;">Load More</button>
    </div>

    <?php
    return ob_get_clean();
}






function enqueue_property_ajax_scripts() {
    wp_enqueue_script('property-ajax', get_template_directory_uri() . '/js/property-ajax.js', array('jquery'), null, true);

    wp_localize_script('property-ajax', 'property_ajax_obj', array(
        'ajax_url' => admin_url('admin-ajax.php'),
    ));
}
add_action('wp_enqueue_scripts', 'enqueue_property_ajax_scripts');


function load_more_properties_ajax() {
    $paged = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $term  = isset($_POST['property_type']) ? sanitize_text_field($_POST['property_type']) : '';

    $args = array(
        'post_type' => 'property',
        'posts_per_page' => 3,
        'paged' => $paged,
    );

    if ($term && $term !== 'all') {
        $args['tax_query'] = array(
            array(
                'taxonomy' => 'property-type',
                'field' => 'slug',
                'terms' => $term,
            ),
        );
    }

    $query = new WP_Query($args);

    if ($query->have_posts()) {
        ob_start();
        while ($query->have_posts()) : $query->the_post();
            // your post output here
            ?>
            <div class="property-item">
                <?php if (has_post_thumbnail()): ?>
                    <div class="property-thumb"><?php the_post_thumbnail('medium'); ?></div>
                <?php endif; ?>
                <h3><?php the_title(); ?></h3>
                <div><?php the_excerpt(); ?></div>
                <?php
                $squarefeet = get_field('property_squarfit');
                if ($squarefeet):
                ?>
                    <p><strong>Square Feet:</strong> <?php echo esc_html($squarefeet); ?> sq ft</p>
                <?php endif; ?>
            </div>
            <?php
        endwhile;
        wp_reset_postdata();
        echo ob_get_clean();
    } else {
        echo ''; // return empty string if no posts found
    }

    wp_die();
}


add_action('wp_ajax_load_more_properties', 'load_more_properties_ajax');
add_action('wp_ajax_nopriv_load_more_properties', 'load_more_properties_ajax');

+++++++++++++++++++++++++++++++++++++THEME/TEMPLATE-PARTS/PROPERTY-LIST.PHP+++++++++++++++++++++++++++++++++++++++++++++
<?php
$query = get_query_var('ajax_property_query');

if ($query && $query->have_posts()):
    while ($query->have_posts()): $query->the_post();
        $squarefeet = get_field('property_squarfit');
        ?>
        <div class="property-item">
            <?php if (has_post_thumbnail()): ?>
                <div class="property-thumb">
                    <?php the_post_thumbnail('medium'); ?>
                </div>
            <?php endif; ?>

            <h3><?php the_title(); ?></h3>
            <div><?php the_excerpt(); ?></div>

            <?php if ($squarefeet): ?>
                <p><strong>Square Feet:</strong> <?php echo esc_html($squarefeet); ?> sq ft</p>
            <?php endif; ?>
        </div>
    <?php endwhile;
endif;
?>

++++++++++++++++++++++++++++++++++++++++++ js/property-ajax.js ++++++++++++++++++++++++++++++++++++++
jQuery(document).ready(function ($) {
    let page = 1;
    let currentType = 'apartment'; // default

   function loadProperties(reset = false) {
    if (reset) {
        $('.property-list').html('');
        $('.no-more-posts').remove();
        $('.load-more').hide();
        page = 1;
    } else {
        page++;
    }

        $.ajax({
            url: property_ajax_obj.ajax_url,
            type: 'POST',
            data: {
                action: 'load_more_properties',
                page: page,
                property_type: currentType
            },
  success: function(response) {
    if (response.trim() !== '') {
        // If posts found, append
        $('.no-more-posts').remove(); // remove previous no-post message if exists
        $('.property-list').append(response);
        $('.load-more').show();
    } else {
        // No posts found
        $('.load-more').hide();
        if (!$('.no-more-posts').length) {
            $('.property-list').append('<div class="no-more-posts">No more properties found.</div>');
        }
    }
}



        });
    }

    // Initial load
    loadProperties(true);

    // On button click
    $('#property-filter-buttons').on('click', '.filter-button', function () {
        $('.filter-button').removeClass('active');
        $(this).addClass('active');
        currentType = $(this).data('slug');
        loadProperties(true);
    });

    // Load more
    $('.load-more').on('click', function (e) {
        e.preventDefault();
        loadProperties();
    });
});

+++++++++++++++++++++++++ FRONT-PAGE.PHP +++++++++++++++++++++++++++

<?php get_header(); ?>

<?php get_template_part('templates/page-properties'); ?>

<?php get_footer();?>
















